                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module HAL_CLK
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLKPrescTable
                                     12 	.globl _HSIDivFactor
                                     13 	.globl _CLK_DeInit
                                     14 	.globl _CLK_FastHaltWakeUpCmd
                                     15 	.globl _CLK_HSECmd
                                     16 	.globl _CLK_HSICmd
                                     17 	.globl _CLK_LSICmd
                                     18 	.globl _CLK_CCOCmd
                                     19 	.globl _CLK_ClockSwitchCmd
                                     20 	.globl _CLK_SlowActiveHaltWakeUpCmd
                                     21 	.globl _CLK_PeripheralClockConfig
                                     22 	.globl _CLK_ClockSwitchConfig
                                     23 	.globl _CLK_HSIPrescalerConfig
                                     24 	.globl _CLK_CCOConfig
                                     25 	.globl _CLK_ITConfig
                                     26 	.globl _CLK_SYSCLKConfig
                                     27 	.globl _CLK_SWIMConfig
                                     28 	.globl _CLK_ClockSecuritySystemEnable
                                     29 	.globl _CLK_GetSYSCLKSource
                                     30 	.globl _CLK_GetClockFreq
                                     31 	.globl _CLK_AdjustHSICalibrationValue
                                     32 	.globl _CLK_SYSCLKEmergencyClear
                                     33 	.globl _CLK_GetFlagStatus
                                     34 	.globl _CLK_GetITStatus
                                     35 	.globl _CLK_ClearITPendingBit
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area DATA
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area INITIALIZED
                                     44 ;--------------------------------------------------------
                                     45 ; absolute external ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DABS (ABS)
                                     48 
                                     49 ; default segment ordering for linker
                                     50 	.area HOME
                                     51 	.area GSINIT
                                     52 	.area GSFINAL
                                     53 	.area CONST
                                     54 	.area INITIALIZER
                                     55 	.area CODE
                                     56 
                                     57 ;--------------------------------------------------------
                                     58 ; global & static initialisations
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
                                     61 	.area GSINIT
                                     62 	.area GSFINAL
                                     63 	.area GSINIT
                                     64 ;--------------------------------------------------------
                                     65 ; Home
                                     66 ;--------------------------------------------------------
                                     67 	.area HOME
                                     68 	.area HOME
                                     69 ;--------------------------------------------------------
                                     70 ; code
                                     71 ;--------------------------------------------------------
                                     72 	.area CODE
                                     73 ;	HAL_CLK.c: 12: void CLK_DeInit(void)
                                     74 ;	-----------------------------------------
                                     75 ;	 function CLK_DeInit
                                     76 ;	-----------------------------------------
      000000                         77 _CLK_DeInit:
                                     78 ;	HAL_CLK.c: 15: CLK->ICKR = CLK_ICKR_RESET_VALUE;
      000000 35 01 50 C0      [ 1]   79 	mov	0x50c0+0, #0x01
                                     80 ;	HAL_CLK.c: 16: CLK->ECKR = CLK_ECKR_RESET_VALUE;
      000004 35 00 50 C1      [ 1]   81 	mov	0x50c1+0, #0x00
                                     82 ;	HAL_CLK.c: 17: CLK->SWR  = CLK_SWR_RESET_VALUE;
      000008 35 E1 50 C4      [ 1]   83 	mov	0x50c4+0, #0xe1
                                     84 ;	HAL_CLK.c: 18: CLK->SWCR = CLK_SWCR_RESET_VALUE;
      00000C 35 00 50 C5      [ 1]   85 	mov	0x50c5+0, #0x00
                                     86 ;	HAL_CLK.c: 19: CLK->CKDIVR = CLK_CKDIVR_RESET_VALUE;
      000010 35 18 50 C6      [ 1]   87 	mov	0x50c6+0, #0x18
                                     88 ;	HAL_CLK.c: 20: CLK->PCKENR1 = CLK_PCKENR1_RESET_VALUE;
      000014 35 FF 50 C7      [ 1]   89 	mov	0x50c7+0, #0xff
                                     90 ;	HAL_CLK.c: 21: CLK->PCKENR2 = CLK_PCKENR2_RESET_VALUE;
      000018 35 FF 50 CA      [ 1]   91 	mov	0x50ca+0, #0xff
                                     92 ;	HAL_CLK.c: 22: CLK->CSSR = CLK_CSSR_RESET_VALUE;
      00001C 35 00 50 C8      [ 1]   93 	mov	0x50c8+0, #0x00
                                     94 ;	HAL_CLK.c: 23: CLK->CCOR = CLK_CCOR_RESET_VALUE;
      000020 35 00 50 C9      [ 1]   95 	mov	0x50c9+0, #0x00
                                     96 ;	HAL_CLK.c: 24: while ((CLK->CCOR & CLK_CCOR_CCOEN)!= 0)
      000024                         97 00101$:
      000024 C6 50 C9         [ 1]   98 	ld	a, 0x50c9
      000027 44               [ 1]   99 	srl	a
      000028 25 FA            [ 1]  100 	jrc	00101$
                                    101 ;	HAL_CLK.c: 26: CLK->CCOR = CLK_CCOR_RESET_VALUE;
      00002A 35 00 50 C9      [ 1]  102 	mov	0x50c9+0, #0x00
                                    103 ;	HAL_CLK.c: 27: CLK->HSITRIMR = CLK_HSITRIMR_RESET_VALUE;
      00002E 35 00 50 CC      [ 1]  104 	mov	0x50cc+0, #0x00
                                    105 ;	HAL_CLK.c: 28: CLK->SWIMCCR = CLK_SWIMCCR_RESET_VALUE;
      000032 35 00 50 CD      [ 1]  106 	mov	0x50cd+0, #0x00
                                    107 ;	HAL_CLK.c: 30: }
      000036 81               [ 4]  108 	ret
                                    109 ;	HAL_CLK.c: 32: void CLK_FastHaltWakeUpCmd(uint8_t NewState)
                                    110 ;	-----------------------------------------
                                    111 ;	 function CLK_FastHaltWakeUpCmd
                                    112 ;	-----------------------------------------
      000037                        113 _CLK_FastHaltWakeUpCmd:
                                    114 ;	HAL_CLK.c: 37: CLK->ICKR |= CLK_ICKR_FHWU;
      000037 C6 50 C0         [ 1]  115 	ld	a, 0x50c0
                                    116 ;	HAL_CLK.c: 34: if (NewState != 0)
      00003A 0D 03            [ 1]  117 	tnz	(0x03, sp)
      00003C 27 06            [ 1]  118 	jreq	00102$
                                    119 ;	HAL_CLK.c: 37: CLK->ICKR |= CLK_ICKR_FHWU;
      00003E AA 04            [ 1]  120 	or	a, #0x04
      000040 C7 50 C0         [ 1]  121 	ld	0x50c0, a
      000043 81               [ 4]  122 	ret
      000044                        123 00102$:
                                    124 ;	HAL_CLK.c: 42: CLK->ICKR &= (uint8_t)(~CLK_ICKR_FHWU);
      000044 A4 FB            [ 1]  125 	and	a, #0xfb
      000046 C7 50 C0         [ 1]  126 	ld	0x50c0, a
                                    127 ;	HAL_CLK.c: 45: }
      000049 81               [ 4]  128 	ret
                                    129 ;	HAL_CLK.c: 47: void CLK_HSECmd(uint8_t NewState)
                                    130 ;	-----------------------------------------
                                    131 ;	 function CLK_HSECmd
                                    132 ;	-----------------------------------------
      00004A                        133 _CLK_HSECmd:
                                    134 ;	HAL_CLK.c: 52: CLK->ECKR |= CLK_ECKR_HSEEN;
      00004A C6 50 C1         [ 1]  135 	ld	a, 0x50c1
                                    136 ;	HAL_CLK.c: 49: if (NewState != 0)
      00004D 0D 03            [ 1]  137 	tnz	(0x03, sp)
      00004F 27 06            [ 1]  138 	jreq	00102$
                                    139 ;	HAL_CLK.c: 52: CLK->ECKR |= CLK_ECKR_HSEEN;
      000051 AA 01            [ 1]  140 	or	a, #0x01
      000053 C7 50 C1         [ 1]  141 	ld	0x50c1, a
      000056 81               [ 4]  142 	ret
      000057                        143 00102$:
                                    144 ;	HAL_CLK.c: 57: CLK->ECKR &= (uint8_t)(~CLK_ECKR_HSEEN);
      000057 A4 FE            [ 1]  145 	and	a, #0xfe
      000059 C7 50 C1         [ 1]  146 	ld	0x50c1, a
                                    147 ;	HAL_CLK.c: 60: }
      00005C 81               [ 4]  148 	ret
                                    149 ;	HAL_CLK.c: 62: void CLK_HSICmd(uint8_t NewState)
                                    150 ;	-----------------------------------------
                                    151 ;	 function CLK_HSICmd
                                    152 ;	-----------------------------------------
      00005D                        153 _CLK_HSICmd:
                                    154 ;	HAL_CLK.c: 67: CLK->ICKR |= CLK_ICKR_HSIEN;
      00005D C6 50 C0         [ 1]  155 	ld	a, 0x50c0
                                    156 ;	HAL_CLK.c: 64: if (NewState != 0)
      000060 0D 03            [ 1]  157 	tnz	(0x03, sp)
      000062 27 06            [ 1]  158 	jreq	00102$
                                    159 ;	HAL_CLK.c: 67: CLK->ICKR |= CLK_ICKR_HSIEN;
      000064 AA 01            [ 1]  160 	or	a, #0x01
      000066 C7 50 C0         [ 1]  161 	ld	0x50c0, a
      000069 81               [ 4]  162 	ret
      00006A                        163 00102$:
                                    164 ;	HAL_CLK.c: 72: CLK->ICKR &= (uint8_t)(~CLK_ICKR_HSIEN);
      00006A A4 FE            [ 1]  165 	and	a, #0xfe
      00006C C7 50 C0         [ 1]  166 	ld	0x50c0, a
                                    167 ;	HAL_CLK.c: 75: }
      00006F 81               [ 4]  168 	ret
                                    169 ;	HAL_CLK.c: 78: void CLK_LSICmd(uint8_t NewState)
                                    170 ;	-----------------------------------------
                                    171 ;	 function CLK_LSICmd
                                    172 ;	-----------------------------------------
      000070                        173 _CLK_LSICmd:
                                    174 ;	HAL_CLK.c: 83: CLK->ICKR |= CLK_ICKR_LSIEN;
      000070 C6 50 C0         [ 1]  175 	ld	a, 0x50c0
                                    176 ;	HAL_CLK.c: 80: if (NewState != 0)
      000073 0D 03            [ 1]  177 	tnz	(0x03, sp)
      000075 27 06            [ 1]  178 	jreq	00102$
                                    179 ;	HAL_CLK.c: 83: CLK->ICKR |= CLK_ICKR_LSIEN;
      000077 AA 08            [ 1]  180 	or	a, #0x08
      000079 C7 50 C0         [ 1]  181 	ld	0x50c0, a
      00007C 81               [ 4]  182 	ret
      00007D                        183 00102$:
                                    184 ;	HAL_CLK.c: 88: CLK->ICKR &= (uint8_t)(~CLK_ICKR_LSIEN);
      00007D A4 F7            [ 1]  185 	and	a, #0xf7
      00007F C7 50 C0         [ 1]  186 	ld	0x50c0, a
                                    187 ;	HAL_CLK.c: 91: }
      000082 81               [ 4]  188 	ret
                                    189 ;	HAL_CLK.c: 93: void CLK_CCOCmd(uint8_t NewState)
                                    190 ;	-----------------------------------------
                                    191 ;	 function CLK_CCOCmd
                                    192 ;	-----------------------------------------
      000083                        193 _CLK_CCOCmd:
                                    194 ;	HAL_CLK.c: 98: CLK->CCOR |= CLK_CCOR_CCOEN;
      000083 C6 50 C9         [ 1]  195 	ld	a, 0x50c9
                                    196 ;	HAL_CLK.c: 95: if (NewState != 0)
      000086 0D 03            [ 1]  197 	tnz	(0x03, sp)
      000088 27 06            [ 1]  198 	jreq	00102$
                                    199 ;	HAL_CLK.c: 98: CLK->CCOR |= CLK_CCOR_CCOEN;
      00008A AA 01            [ 1]  200 	or	a, #0x01
      00008C C7 50 C9         [ 1]  201 	ld	0x50c9, a
      00008F 81               [ 4]  202 	ret
      000090                        203 00102$:
                                    204 ;	HAL_CLK.c: 103: CLK->CCOR &= (uint8_t)(~CLK_CCOR_CCOEN);
      000090 A4 FE            [ 1]  205 	and	a, #0xfe
      000092 C7 50 C9         [ 1]  206 	ld	0x50c9, a
                                    207 ;	HAL_CLK.c: 106: }
      000095 81               [ 4]  208 	ret
                                    209 ;	HAL_CLK.c: 115: void CLK_ClockSwitchCmd(uint8_t NewState)
                                    210 ;	-----------------------------------------
                                    211 ;	 function CLK_ClockSwitchCmd
                                    212 ;	-----------------------------------------
      000096                        213 _CLK_ClockSwitchCmd:
                                    214 ;	HAL_CLK.c: 120: CLK->SWCR |= CLK_SWCR_SWEN;
      000096 C6 50 C5         [ 1]  215 	ld	a, 0x50c5
                                    216 ;	HAL_CLK.c: 117: if (NewState != 0 )
      000099 0D 03            [ 1]  217 	tnz	(0x03, sp)
      00009B 27 06            [ 1]  218 	jreq	00102$
                                    219 ;	HAL_CLK.c: 120: CLK->SWCR |= CLK_SWCR_SWEN;
      00009D AA 02            [ 1]  220 	or	a, #0x02
      00009F C7 50 C5         [ 1]  221 	ld	0x50c5, a
      0000A2 81               [ 4]  222 	ret
      0000A3                        223 00102$:
                                    224 ;	HAL_CLK.c: 125: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWEN);
      0000A3 A4 FD            [ 1]  225 	and	a, #0xfd
      0000A5 C7 50 C5         [ 1]  226 	ld	0x50c5, a
                                    227 ;	HAL_CLK.c: 128: }
      0000A8 81               [ 4]  228 	ret
                                    229 ;	HAL_CLK.c: 130: void CLK_SlowActiveHaltWakeUpCmd(uint8_t NewState)
                                    230 ;	-----------------------------------------
                                    231 ;	 function CLK_SlowActiveHaltWakeUpCmd
                                    232 ;	-----------------------------------------
      0000A9                        233 _CLK_SlowActiveHaltWakeUpCmd:
                                    234 ;	HAL_CLK.c: 135: CLK->ICKR |= CLK_ICKR_SWUAH;
      0000A9 C6 50 C0         [ 1]  235 	ld	a, 0x50c0
                                    236 ;	HAL_CLK.c: 132: if (NewState != 0)
      0000AC 0D 03            [ 1]  237 	tnz	(0x03, sp)
      0000AE 27 06            [ 1]  238 	jreq	00102$
                                    239 ;	HAL_CLK.c: 135: CLK->ICKR |= CLK_ICKR_SWUAH;
      0000B0 AA 20            [ 1]  240 	or	a, #0x20
      0000B2 C7 50 C0         [ 1]  241 	ld	0x50c0, a
      0000B5 81               [ 4]  242 	ret
      0000B6                        243 00102$:
                                    244 ;	HAL_CLK.c: 140: CLK->ICKR &= (uint8_t)(~CLK_ICKR_SWUAH);
      0000B6 A4 DF            [ 1]  245 	and	a, #0xdf
      0000B8 C7 50 C0         [ 1]  246 	ld	0x50c0, a
                                    247 ;	HAL_CLK.c: 143: }
      0000BB 81               [ 4]  248 	ret
                                    249 ;	HAL_CLK.c: 145: void CLK_PeripheralClockConfig(CLK_Peripheral_TypeDef CLK_Peripheral, uint8_t NewState)
                                    250 ;	-----------------------------------------
                                    251 ;	 function CLK_PeripheralClockConfig
                                    252 ;	-----------------------------------------
      0000BC                        253 _CLK_PeripheralClockConfig:
      0000BC 52 02            [ 2]  254 	sub	sp, #2
                                    255 ;	HAL_CLK.c: 152: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      0000BE 7B 05            [ 1]  256 	ld	a, (0x05, sp)
      0000C0 A4 0F            [ 1]  257 	and	a, #0x0f
      0000C2 88               [ 1]  258 	push	a
      0000C3 A6 01            [ 1]  259 	ld	a, #0x01
      0000C5 6B 02            [ 1]  260 	ld	(0x02, sp), a
      0000C7 84               [ 1]  261 	pop	a
      0000C8 4D               [ 1]  262 	tnz	a
      0000C9 27 05            [ 1]  263 	jreq	00128$
      0000CB                        264 00127$:
      0000CB 08 01            [ 1]  265 	sll	(0x01, sp)
      0000CD 4A               [ 1]  266 	dec	a
      0000CE 26 FB            [ 1]  267 	jrne	00127$
      0000D0                        268 00128$:
                                    269 ;	HAL_CLK.c: 157: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      0000D0 7B 01            [ 1]  270 	ld	a, (0x01, sp)
      0000D2 43               [ 1]  271 	cpl	a
      0000D3 6B 02            [ 1]  272 	ld	(0x02, sp), a
                                    273 ;	HAL_CLK.c: 147: if (((uint8_t)CLK_Peripheral & (uint8_t)0x10) == 0x00)
      0000D5 7B 05            [ 1]  274 	ld	a, (0x05, sp)
      0000D7 A5 10            [ 1]  275 	bcp	a, #0x10
      0000D9 26 15            [ 1]  276 	jrne	00108$
                                    277 ;	HAL_CLK.c: 152: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      0000DB C6 50 C7         [ 1]  278 	ld	a, 0x50c7
                                    279 ;	HAL_CLK.c: 149: if (NewState != 0)
      0000DE 0D 06            [ 1]  280 	tnz	(0x06, sp)
      0000E0 27 07            [ 1]  281 	jreq	00102$
                                    282 ;	HAL_CLK.c: 152: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      0000E2 1A 01            [ 1]  283 	or	a, (0x01, sp)
      0000E4 C7 50 C7         [ 1]  284 	ld	0x50c7, a
      0000E7 20 1A            [ 2]  285 	jra	00110$
      0000E9                        286 00102$:
                                    287 ;	HAL_CLK.c: 157: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      0000E9 14 02            [ 1]  288 	and	a, (0x02, sp)
      0000EB C7 50 C7         [ 1]  289 	ld	0x50c7, a
      0000EE 20 13            [ 2]  290 	jra	00110$
      0000F0                        291 00108$:
                                    292 ;	HAL_CLK.c: 165: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      0000F0 C6 50 CA         [ 1]  293 	ld	a, 0x50ca
                                    294 ;	HAL_CLK.c: 162: if (NewState != 0)
      0000F3 0D 06            [ 1]  295 	tnz	(0x06, sp)
      0000F5 27 07            [ 1]  296 	jreq	00105$
                                    297 ;	HAL_CLK.c: 165: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      0000F7 1A 01            [ 1]  298 	or	a, (0x01, sp)
      0000F9 C7 50 CA         [ 1]  299 	ld	0x50ca, a
      0000FC 20 05            [ 2]  300 	jra	00110$
      0000FE                        301 00105$:
                                    302 ;	HAL_CLK.c: 170: CLK->PCKENR2 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      0000FE 14 02            [ 1]  303 	and	a, (0x02, sp)
      000100 C7 50 CA         [ 1]  304 	ld	0x50ca, a
      000103                        305 00110$:
                                    306 ;	HAL_CLK.c: 174: }
      000103 5B 02            [ 2]  307 	addw	sp, #2
      000105 81               [ 4]  308 	ret
                                    309 ;	HAL_CLK.c: 176: uint8_t CLK_ClockSwitchConfig(CLK_SwitchMode_TypeDef CLK_SwitchMode, CLK_Source_TypeDef CLK_NewClock, uint8_t ITState, CLK_CurrentClockState_TypeDef CLK_CurrentClockState)
                                    310 ;	-----------------------------------------
                                    311 ;	 function CLK_ClockSwitchConfig
                                    312 ;	-----------------------------------------
      000106                        313 _CLK_ClockSwitchConfig:
                                    314 ;	HAL_CLK.c: 182: clock_master = (CLK_Source_TypeDef)CLK->CMSR;
      000106 C6 50 C3         [ 1]  315 	ld	a, 0x50c3
      000109 90 97            [ 1]  316 	ld	yl, a
                                    317 ;	HAL_CLK.c: 189: CLK->SWCR |= CLK_SWCR_SWEN;
      00010B C6 50 C5         [ 1]  318 	ld	a, 0x50c5
                                    319 ;	HAL_CLK.c: 185: if (CLK_SwitchMode == CLK_SWITCHMODE_AUTO)
      00010E 88               [ 1]  320 	push	a
      00010F 7B 04            [ 1]  321 	ld	a, (0x04, sp)
      000111 4A               [ 1]  322 	dec	a
      000112 84               [ 1]  323 	pop	a
      000113 26 38            [ 1]  324 	jrne	00115$
                                    325 ;	HAL_CLK.c: 189: CLK->SWCR |= CLK_SWCR_SWEN;
      000115 AA 02            [ 1]  326 	or	a, #0x02
      000117 C7 50 C5         [ 1]  327 	ld	0x50c5, a
      00011A C6 50 C5         [ 1]  328 	ld	a, 0x50c5
                                    329 ;	HAL_CLK.c: 192: if (ITState != 0)
      00011D 0D 05            [ 1]  330 	tnz	(0x05, sp)
      00011F 27 07            [ 1]  331 	jreq	00102$
                                    332 ;	HAL_CLK.c: 194: CLK->SWCR |= CLK_SWCR_SWIEN;
      000121 AA 04            [ 1]  333 	or	a, #0x04
      000123 C7 50 C5         [ 1]  334 	ld	0x50c5, a
      000126 20 05            [ 2]  335 	jra	00103$
      000128                        336 00102$:
                                    337 ;	HAL_CLK.c: 198: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWIEN);
      000128 A4 FB            [ 1]  338 	and	a, #0xfb
      00012A C7 50 C5         [ 1]  339 	ld	0x50c5, a
      00012D                        340 00103$:
                                    341 ;	HAL_CLK.c: 202: CLK->SWR = (uint8_t)CLK_NewClock;
      00012D AE 50 C4         [ 2]  342 	ldw	x, #0x50c4
      000130 7B 04            [ 1]  343 	ld	a, (0x04, sp)
      000132 F7               [ 1]  344 	ld	(x), a
                                    345 ;	HAL_CLK.c: 204: while ((((CLK->SWCR & CLK_SWCR_SWBSY) != 0 )&& (DownCounter != 0)))
      000133 AE 04 91         [ 2]  346 	ldw	x, #0x0491
      000136                        347 00105$:
      000136 C6 50 C5         [ 1]  348 	ld	a, 0x50c5
      000139 44               [ 1]  349 	srl	a
      00013A 24 06            [ 1]  350 	jrnc	00107$
      00013C 5D               [ 2]  351 	tnzw	x
      00013D 27 03            [ 1]  352 	jreq	00107$
                                    353 ;	HAL_CLK.c: 206: DownCounter--;
      00013F 5A               [ 2]  354 	decw	x
      000140 20 F4            [ 2]  355 	jra	00105$
      000142                        356 00107$:
                                    357 ;	HAL_CLK.c: 209: if (DownCounter != 0)
      000142 5D               [ 2]  358 	tnzw	x
      000143 27 05            [ 1]  359 	jreq	00109$
                                    360 ;	HAL_CLK.c: 211: Swif = 1;
      000145 A6 01            [ 1]  361 	ld	a, #0x01
      000147 97               [ 1]  362 	ld	xl, a
      000148 20 1C            [ 2]  363 	jra	00116$
      00014A                        364 00109$:
                                    365 ;	HAL_CLK.c: 215: Swif = 0;
      00014A 5F               [ 1]  366 	clrw	x
      00014B 20 19            [ 2]  367 	jra	00116$
      00014D                        368 00115$:
                                    369 ;	HAL_CLK.c: 223: if (ITState != 0)
      00014D 0D 05            [ 1]  370 	tnz	(0x05, sp)
      00014F 27 07            [ 1]  371 	jreq	00112$
                                    372 ;	HAL_CLK.c: 225: CLK->SWCR |= CLK_SWCR_SWIEN;
      000151 AA 04            [ 1]  373 	or	a, #0x04
      000153 C7 50 C5         [ 1]  374 	ld	0x50c5, a
      000156 20 05            [ 2]  375 	jra	00113$
      000158                        376 00112$:
                                    377 ;	HAL_CLK.c: 229: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWIEN);
      000158 A4 FB            [ 1]  378 	and	a, #0xfb
      00015A C7 50 C5         [ 1]  379 	ld	0x50c5, a
      00015D                        380 00113$:
                                    381 ;	HAL_CLK.c: 233: CLK->SWR = (uint8_t)CLK_NewClock;
      00015D AE 50 C4         [ 2]  382 	ldw	x, #0x50c4
      000160 7B 04            [ 1]  383 	ld	a, (0x04, sp)
      000162 F7               [ 1]  384 	ld	(x), a
                                    385 ;	HAL_CLK.c: 237: Swif = 1;
      000163 A6 01            [ 1]  386 	ld	a, #0x01
      000165 97               [ 1]  387 	ld	xl, a
      000166                        388 00116$:
                                    389 ;	HAL_CLK.c: 242: if ((CLK_CurrentClockState == CLK_CURRENTCLOCKSTATE_DISABLE) && ( clock_master == CLK_SOURCE_HSI))
      000166 0D 06            [ 1]  390 	tnz	(0x06, sp)
      000168 26 0C            [ 1]  391 	jrne	00125$
      00016A 90 9F            [ 1]  392 	ld	a, yl
      00016C A1 E1            [ 1]  393 	cp	a, #0xe1
      00016E 26 06            [ 1]  394 	jrne	00125$
                                    395 ;	HAL_CLK.c: 244: CLK->ICKR &= (uint8_t)(~CLK_ICKR_HSIEN);
      000170 72 11 50 C0      [ 1]  396 	bres	20672, #0
      000174 20 1E            [ 2]  397 	jra	00126$
      000176                        398 00125$:
                                    399 ;	HAL_CLK.c: 246: else if ((CLK_CurrentClockState == CLK_CURRENTCLOCKSTATE_DISABLE) && ( clock_master == CLK_SOURCE_LSI))
      000176 0D 06            [ 1]  400 	tnz	(0x06, sp)
      000178 26 0C            [ 1]  401 	jrne	00121$
      00017A 90 9F            [ 1]  402 	ld	a, yl
      00017C A1 D2            [ 1]  403 	cp	a, #0xd2
      00017E 26 06            [ 1]  404 	jrne	00121$
                                    405 ;	HAL_CLK.c: 248: CLK->ICKR &= (uint8_t)(~CLK_ICKR_LSIEN);
      000180 72 17 50 C0      [ 1]  406 	bres	20672, #3
      000184 20 0E            [ 2]  407 	jra	00126$
      000186                        408 00121$:
                                    409 ;	HAL_CLK.c: 250: else if ((CLK_CurrentClockState == CLK_CURRENTCLOCKSTATE_DISABLE) && ( clock_master == CLK_SOURCE_HSE))
      000186 0D 06            [ 1]  410 	tnz	(0x06, sp)
      000188 26 0A            [ 1]  411 	jrne	00126$
      00018A 90 9F            [ 1]  412 	ld	a, yl
      00018C A1 B4            [ 1]  413 	cp	a, #0xb4
      00018E 26 04            [ 1]  414 	jrne	00126$
                                    415 ;	HAL_CLK.c: 252: CLK->ECKR &= (uint8_t)(~CLK_ECKR_HSEEN);
      000190 72 11 50 C1      [ 1]  416 	bres	20673, #0
      000194                        417 00126$:
                                    418 ;	HAL_CLK.c: 255: return(Swif);
      000194 9F               [ 1]  419 	ld	a, xl
                                    420 ;	HAL_CLK.c: 257: }
      000195 81               [ 4]  421 	ret
                                    422 ;	HAL_CLK.c: 259: void CLK_HSIPrescalerConfig(CLK_Prescaler_TypeDef HSIPrescaler)
                                    423 ;	-----------------------------------------
                                    424 ;	 function CLK_HSIPrescalerConfig
                                    425 ;	-----------------------------------------
      000196                        426 _CLK_HSIPrescalerConfig:
                                    427 ;	HAL_CLK.c: 262: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      000196 C6 50 C6         [ 1]  428 	ld	a, 0x50c6
      000199 A4 E7            [ 1]  429 	and	a, #0xe7
      00019B C7 50 C6         [ 1]  430 	ld	0x50c6, a
                                    431 ;	HAL_CLK.c: 265: CLK->CKDIVR |= (uint8_t)HSIPrescaler;
      00019E C6 50 C6         [ 1]  432 	ld	a, 0x50c6
      0001A1 1A 03            [ 1]  433 	or	a, (0x03, sp)
      0001A3 C7 50 C6         [ 1]  434 	ld	0x50c6, a
                                    435 ;	HAL_CLK.c: 267: }
      0001A6 81               [ 4]  436 	ret
                                    437 ;	HAL_CLK.c: 269: void CLK_CCOConfig(CLK_Output_TypeDef CLK_CCO)
                                    438 ;	-----------------------------------------
                                    439 ;	 function CLK_CCOConfig
                                    440 ;	-----------------------------------------
      0001A7                        441 _CLK_CCOConfig:
                                    442 ;	HAL_CLK.c: 271: CLK->CCOR &= (uint8_t)(~CLK_CCOR_CCOSEL);
      0001A7 C6 50 C9         [ 1]  443 	ld	a, 0x50c9
      0001AA A4 E1            [ 1]  444 	and	a, #0xe1
      0001AC C7 50 C9         [ 1]  445 	ld	0x50c9, a
                                    446 ;	HAL_CLK.c: 274: CLK->CCOR |= (uint8_t)CLK_CCO;
      0001AF C6 50 C9         [ 1]  447 	ld	a, 0x50c9
      0001B2 1A 03            [ 1]  448 	or	a, (0x03, sp)
      0001B4 C7 50 C9         [ 1]  449 	ld	0x50c9, a
                                    450 ;	HAL_CLK.c: 277: CLK->CCOR |= CLK_CCOR_CCOEN;
      0001B7 72 10 50 C9      [ 1]  451 	bset	20681, #0
                                    452 ;	HAL_CLK.c: 279: }
      0001BB 81               [ 4]  453 	ret
                                    454 ;	HAL_CLK.c: 281: void CLK_ITConfig(CLK_IT_TypeDef CLK_IT, uint8_t NewState)
                                    455 ;	-----------------------------------------
                                    456 ;	 function CLK_ITConfig
                                    457 ;	-----------------------------------------
      0001BC                        458 _CLK_ITConfig:
      0001BC 88               [ 1]  459 	push	a
                                    460 ;	HAL_CLK.c: 285: switch (CLK_IT)
      0001BD 7B 04            [ 1]  461 	ld	a, (0x04, sp)
      0001BF A0 0C            [ 1]  462 	sub	a, #0x0c
      0001C1 26 04            [ 1]  463 	jrne	00140$
      0001C3 4C               [ 1]  464 	inc	a
      0001C4 6B 01            [ 1]  465 	ld	(0x01, sp), a
      0001C6 C5                     466 	.byte 0xc5
      0001C7                        467 00140$:
      0001C7 0F 01            [ 1]  468 	clr	(0x01, sp)
      0001C9                        469 00141$:
      0001C9 7B 04            [ 1]  470 	ld	a, (0x04, sp)
      0001CB A0 1C            [ 1]  471 	sub	a, #0x1c
      0001CD 26 02            [ 1]  472 	jrne	00143$
      0001CF 4C               [ 1]  473 	inc	a
      0001D0 21                     474 	.byte 0x21
      0001D1                        475 00143$:
      0001D1 4F               [ 1]  476 	clr	a
      0001D2                        477 00144$:
                                    478 ;	HAL_CLK.c: 283: if (NewState != 0)
      0001D2 0D 05            [ 1]  479 	tnz	(0x05, sp)
      0001D4 27 13            [ 1]  480 	jreq	00110$
                                    481 ;	HAL_CLK.c: 285: switch (CLK_IT)
      0001D6 0D 01            [ 1]  482 	tnz	(0x01, sp)
      0001D8 26 09            [ 1]  483 	jrne	00102$
      0001DA 4D               [ 1]  484 	tnz	a
      0001DB 27 1D            [ 1]  485 	jreq	00112$
                                    486 ;	HAL_CLK.c: 288: CLK->SWCR |= CLK_SWCR_SWIEN;
      0001DD 72 14 50 C5      [ 1]  487 	bset	20677, #2
                                    488 ;	HAL_CLK.c: 289: break;
      0001E1 20 17            [ 2]  489 	jra	00112$
                                    490 ;	HAL_CLK.c: 290: case CLK_IT_CSSD: /* Enable the clock security system detection interrupt */
      0001E3                        491 00102$:
                                    492 ;	HAL_CLK.c: 291: CLK->CSSR |= CLK_CSSR_CSSDIE;
      0001E3 72 14 50 C8      [ 1]  493 	bset	20680, #2
                                    494 ;	HAL_CLK.c: 292: break;
      0001E7 20 11            [ 2]  495 	jra	00112$
                                    496 ;	HAL_CLK.c: 295: }
      0001E9                        497 00110$:
                                    498 ;	HAL_CLK.c: 299: switch (CLK_IT)
      0001E9 0D 01            [ 1]  499 	tnz	(0x01, sp)
      0001EB 26 09            [ 1]  500 	jrne	00106$
      0001ED 4D               [ 1]  501 	tnz	a
      0001EE 27 0A            [ 1]  502 	jreq	00112$
                                    503 ;	HAL_CLK.c: 302: CLK->SWCR  &= (uint8_t)(~CLK_SWCR_SWIEN);
      0001F0 72 15 50 C5      [ 1]  504 	bres	20677, #2
                                    505 ;	HAL_CLK.c: 303: break;
      0001F4 20 04            [ 2]  506 	jra	00112$
                                    507 ;	HAL_CLK.c: 304: case CLK_IT_CSSD: /* Disable the clock security system detection interrupt */
      0001F6                        508 00106$:
                                    509 ;	HAL_CLK.c: 305: CLK->CSSR &= (uint8_t)(~CLK_CSSR_CSSDIE);
      0001F6 72 15 50 C8      [ 1]  510 	bres	20680, #2
                                    511 ;	HAL_CLK.c: 309: }
      0001FA                        512 00112$:
                                    513 ;	HAL_CLK.c: 312: }
      0001FA 84               [ 1]  514 	pop	a
      0001FB 81               [ 4]  515 	ret
                                    516 ;	HAL_CLK.c: 315: void CLK_SYSCLKConfig(CLK_Prescaler_TypeDef CLK_Prescaler)
                                    517 ;	-----------------------------------------
                                    518 ;	 function CLK_SYSCLKConfig
                                    519 ;	-----------------------------------------
      0001FC                        520 _CLK_SYSCLKConfig:
      0001FC 88               [ 1]  521 	push	a
                                    522 ;	HAL_CLK.c: 319: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      0001FD C6 50 C6         [ 1]  523 	ld	a, 0x50c6
                                    524 ;	HAL_CLK.c: 317: if (((uint8_t)CLK_Prescaler & (uint8_t)0x80) == 0x00) /* Bit7 = 0 means HSI divider */
      000200 0D 04            [ 1]  525 	tnz	(0x04, sp)
      000202 2B 15            [ 1]  526 	jrmi	00102$
                                    527 ;	HAL_CLK.c: 319: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      000204 A4 E7            [ 1]  528 	and	a, #0xe7
      000206 C7 50 C6         [ 1]  529 	ld	0x50c6, a
                                    530 ;	HAL_CLK.c: 320: CLK->CKDIVR |= (uint8_t)((uint8_t)CLK_Prescaler & (uint8_t)CLK_CKDIVR_HSIDIV);
      000209 C6 50 C6         [ 1]  531 	ld	a, 0x50c6
      00020C 6B 01            [ 1]  532 	ld	(0x01, sp), a
      00020E 7B 04            [ 1]  533 	ld	a, (0x04, sp)
      000210 A4 18            [ 1]  534 	and	a, #0x18
      000212 1A 01            [ 1]  535 	or	a, (0x01, sp)
      000214 C7 50 C6         [ 1]  536 	ld	0x50c6, a
      000217 20 13            [ 2]  537 	jra	00104$
      000219                        538 00102$:
                                    539 ;	HAL_CLK.c: 324: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_CPUDIV);
      000219 A4 F8            [ 1]  540 	and	a, #0xf8
      00021B C7 50 C6         [ 1]  541 	ld	0x50c6, a
                                    542 ;	HAL_CLK.c: 325: CLK->CKDIVR |= (uint8_t)((uint8_t)CLK_Prescaler & (uint8_t)CLK_CKDIVR_CPUDIV);
      00021E C6 50 C6         [ 1]  543 	ld	a, 0x50c6
      000221 6B 01            [ 1]  544 	ld	(0x01, sp), a
      000223 7B 04            [ 1]  545 	ld	a, (0x04, sp)
      000225 A4 07            [ 1]  546 	and	a, #0x07
      000227 1A 01            [ 1]  547 	or	a, (0x01, sp)
      000229 C7 50 C6         [ 1]  548 	ld	0x50c6, a
      00022C                        549 00104$:
                                    550 ;	HAL_CLK.c: 328: }
      00022C 84               [ 1]  551 	pop	a
      00022D 81               [ 4]  552 	ret
                                    553 ;	HAL_CLK.c: 330: void CLK_SWIMConfig(CLK_SWIMDivider_TypeDef CLK_SWIMDivider)
                                    554 ;	-----------------------------------------
                                    555 ;	 function CLK_SWIMConfig
                                    556 ;	-----------------------------------------
      00022E                        557 _CLK_SWIMConfig:
                                    558 ;	HAL_CLK.c: 335: CLK->SWIMCCR |= CLK_SWIMCCR_SWIMDIV;
      00022E C6 50 CD         [ 1]  559 	ld	a, 0x50cd
                                    560 ;	HAL_CLK.c: 332: if (CLK_SWIMDivider != CLK_SWIMDIVIDER_2)
      000231 0D 03            [ 1]  561 	tnz	(0x03, sp)
      000233 27 06            [ 1]  562 	jreq	00102$
                                    563 ;	HAL_CLK.c: 335: CLK->SWIMCCR |= CLK_SWIMCCR_SWIMDIV;
      000235 AA 01            [ 1]  564 	or	a, #0x01
      000237 C7 50 CD         [ 1]  565 	ld	0x50cd, a
      00023A 81               [ 4]  566 	ret
      00023B                        567 00102$:
                                    568 ;	HAL_CLK.c: 340: CLK->SWIMCCR &= (uint8_t)(~CLK_SWIMCCR_SWIMDIV);
      00023B A4 FE            [ 1]  569 	and	a, #0xfe
      00023D C7 50 CD         [ 1]  570 	ld	0x50cd, a
                                    571 ;	HAL_CLK.c: 343: }
      000240 81               [ 4]  572 	ret
                                    573 ;	HAL_CLK.c: 345: void CLK_ClockSecuritySystemEnable(void)
                                    574 ;	-----------------------------------------
                                    575 ;	 function CLK_ClockSecuritySystemEnable
                                    576 ;	-----------------------------------------
      000241                        577 _CLK_ClockSecuritySystemEnable:
                                    578 ;	HAL_CLK.c: 347: CLK->CSSR |= CLK_CSSR_CSSEN;
      000241 72 10 50 C8      [ 1]  579 	bset	20680, #0
                                    580 ;	HAL_CLK.c: 348: }
      000245 81               [ 4]  581 	ret
                                    582 ;	HAL_CLK.c: 350: CLK_Source_TypeDef CLK_GetSYSCLKSource(void)
                                    583 ;	-----------------------------------------
                                    584 ;	 function CLK_GetSYSCLKSource
                                    585 ;	-----------------------------------------
      000246                        586 _CLK_GetSYSCLKSource:
                                    587 ;	HAL_CLK.c: 352: return((CLK_Source_TypeDef)CLK->CMSR);
      000246 C6 50 C3         [ 1]  588 	ld	a, 0x50c3
                                    589 ;	HAL_CLK.c: 353: }
      000249 81               [ 4]  590 	ret
                                    591 ;	HAL_CLK.c: 355: uint32_t CLK_GetClockFreq(void)
                                    592 ;	-----------------------------------------
                                    593 ;	 function CLK_GetClockFreq
                                    594 ;	-----------------------------------------
      00024A                        595 _CLK_GetClockFreq:
      00024A 52 04            [ 2]  596 	sub	sp, #4
                                    597 ;	HAL_CLK.c: 363: clocksource = (CLK_Source_TypeDef)CLK->CMSR;
      00024C C6 50 C3         [ 1]  598 	ld	a, 0x50c3
                                    599 ;	HAL_CLK.c: 365: if (clocksource == CLK_SOURCE_HSI)
      00024F 6B 04            [ 1]  600 	ld	(0x04, sp), a
      000251 A1 E1            [ 1]  601 	cp	a, #0xe1
      000253 26 26            [ 1]  602 	jrne	00105$
                                    603 ;	HAL_CLK.c: 367: tmp = (uint8_t)(CLK->CKDIVR & CLK_CKDIVR_HSIDIV);
      000255 C6 50 C6         [ 1]  604 	ld	a, 0x50c6
      000258 A4 18            [ 1]  605 	and	a, #0x18
                                    606 ;	HAL_CLK.c: 368: tmp = (uint8_t)(tmp >> 3);
      00025A 44               [ 1]  607 	srl	a
      00025B 44               [ 1]  608 	srl	a
      00025C 44               [ 1]  609 	srl	a
                                    610 ;	HAL_CLK.c: 369: presc = HSIDivFactor[tmp];
      00025D 5F               [ 1]  611 	clrw	x
      00025E 97               [ 1]  612 	ld	xl, a
      00025F 1Cr00r00         [ 2]  613 	addw	x, #(_HSIDivFactor + 0)
      000262 F6               [ 1]  614 	ld	a, (x)
                                    615 ;	HAL_CLK.c: 370: clockfrequency = HSI_VALUE / presc;
      000263 5F               [ 1]  616 	clrw	x
      000264 97               [ 1]  617 	ld	xl, a
      000265 90 5F            [ 1]  618 	clrw	y
      000267 89               [ 2]  619 	pushw	x
      000268 90 89            [ 2]  620 	pushw	y
      00026A 4B 00            [ 1]  621 	push	#0x00
      00026C 4B 24            [ 1]  622 	push	#0x24
      00026E 4B F4            [ 1]  623 	push	#0xf4
      000270 4B 00            [ 1]  624 	push	#0x00
      000272 CDr00r00         [ 4]  625 	call	__divulong
      000275 5B 08            [ 2]  626 	addw	sp, #8
      000277 1F 03            [ 2]  627 	ldw	(0x03, sp), x
      000279 20 1A            [ 2]  628 	jra	00106$
      00027B                        629 00105$:
                                    630 ;	HAL_CLK.c: 372: else if ( clocksource == CLK_SOURCE_LSI)
      00027B 7B 04            [ 1]  631 	ld	a, (0x04, sp)
      00027D A1 D2            [ 1]  632 	cp	a, #0xd2
      00027F 26 0B            [ 1]  633 	jrne	00102$
                                    634 ;	HAL_CLK.c: 374: clockfrequency = LSI_VALUE;
      000281 AE F4 00         [ 2]  635 	ldw	x, #0xf400
      000284 1F 03            [ 2]  636 	ldw	(0x03, sp), x
      000286 90 AE 00 01      [ 2]  637 	ldw	y, #0x0001
      00028A 20 09            [ 2]  638 	jra	00106$
      00028C                        639 00102$:
                                    640 ;	HAL_CLK.c: 378: clockfrequency = HSE_VALUE;
      00028C AE 36 00         [ 2]  641 	ldw	x, #0x3600
      00028F 1F 03            [ 2]  642 	ldw	(0x03, sp), x
      000291 90 AE 01 6E      [ 2]  643 	ldw	y, #0x016e
      000295                        644 00106$:
                                    645 ;	HAL_CLK.c: 381: return((uint32_t)clockfrequency);
      000295 1E 03            [ 2]  646 	ldw	x, (0x03, sp)
                                    647 ;	HAL_CLK.c: 383: }
      000297 5B 04            [ 2]  648 	addw	sp, #4
      000299 81               [ 4]  649 	ret
                                    650 ;	HAL_CLK.c: 385: void CLK_AdjustHSICalibrationValue(CLK_HSITrimValue_TypeDef CLK_HSICalibrationValue)
                                    651 ;	-----------------------------------------
                                    652 ;	 function CLK_AdjustHSICalibrationValue
                                    653 ;	-----------------------------------------
      00029A                        654 _CLK_AdjustHSICalibrationValue:
                                    655 ;	HAL_CLK.c: 387: CLK->HSITRIMR = (uint8_t)( (uint8_t)(CLK->HSITRIMR & (uint8_t)(~CLK_HSITRIMR_HSITRIM))|((uint8_t)CLK_HSICalibrationValue));
      00029A C6 50 CC         [ 1]  656 	ld	a, 0x50cc
      00029D A4 F8            [ 1]  657 	and	a, #0xf8
      00029F 1A 03            [ 1]  658 	or	a, (0x03, sp)
      0002A1 C7 50 CC         [ 1]  659 	ld	0x50cc, a
                                    660 ;	HAL_CLK.c: 388: }
      0002A4 81               [ 4]  661 	ret
                                    662 ;	HAL_CLK.c: 390: void CLK_SYSCLKEmergencyClear(void)
                                    663 ;	-----------------------------------------
                                    664 ;	 function CLK_SYSCLKEmergencyClear
                                    665 ;	-----------------------------------------
      0002A5                        666 _CLK_SYSCLKEmergencyClear:
                                    667 ;	HAL_CLK.c: 392: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWBSY);
      0002A5 72 11 50 C5      [ 1]  668 	bres	20677, #0
                                    669 ;	HAL_CLK.c: 393: }
      0002A9 81               [ 4]  670 	ret
                                    671 ;	HAL_CLK.c: 395: uint8_t CLK_GetFlagStatus(CLK_Flag_TypeDef CLK_FLAG)
                                    672 ;	-----------------------------------------
                                    673 ;	 function CLK_GetFlagStatus
                                    674 ;	-----------------------------------------
      0002AA                        675 _CLK_GetFlagStatus:
      0002AA 52 02            [ 2]  676 	sub	sp, #2
                                    677 ;	HAL_CLK.c: 402: statusreg = (uint16_t)((uint16_t)CLK_FLAG & (uint16_t)0xFF00);
      0002AC 1E 05            [ 2]  678 	ldw	x, (0x05, sp)
      0002AE 4F               [ 1]  679 	clr	a
      0002AF 97               [ 1]  680 	ld	xl, a
                                    681 ;	HAL_CLK.c: 405: if (statusreg == 0x0100) /* The flag to check is in ICKRregister */
      0002B0 1F 01            [ 2]  682 	ldw	(0x01, sp), x
      0002B2 A3 01 00         [ 2]  683 	cpw	x, #0x0100
      0002B5 26 05            [ 1]  684 	jrne	00111$
                                    685 ;	HAL_CLK.c: 407: tmpreg = CLK->ICKR;
      0002B7 C6 50 C0         [ 1]  686 	ld	a, 0x50c0
      0002BA 20 27            [ 2]  687 	jra	00112$
      0002BC                        688 00111$:
                                    689 ;	HAL_CLK.c: 409: else if (statusreg == 0x0200) /* The flag to check is in ECKRregister */
      0002BC 1E 01            [ 2]  690 	ldw	x, (0x01, sp)
      0002BE A3 02 00         [ 2]  691 	cpw	x, #0x0200
      0002C1 26 05            [ 1]  692 	jrne	00108$
                                    693 ;	HAL_CLK.c: 411: tmpreg = CLK->ECKR;
      0002C3 C6 50 C1         [ 1]  694 	ld	a, 0x50c1
      0002C6 20 1B            [ 2]  695 	jra	00112$
      0002C8                        696 00108$:
                                    697 ;	HAL_CLK.c: 413: else if (statusreg == 0x0300) /* The flag to check is in SWIC register */
      0002C8 1E 01            [ 2]  698 	ldw	x, (0x01, sp)
      0002CA A3 03 00         [ 2]  699 	cpw	x, #0x0300
      0002CD 26 05            [ 1]  700 	jrne	00105$
                                    701 ;	HAL_CLK.c: 415: tmpreg = CLK->SWCR;
      0002CF C6 50 C5         [ 1]  702 	ld	a, 0x50c5
      0002D2 20 0F            [ 2]  703 	jra	00112$
      0002D4                        704 00105$:
                                    705 ;	HAL_CLK.c: 417: else if (statusreg == 0x0400) /* The flag to check is in CSS register */
      0002D4 1E 01            [ 2]  706 	ldw	x, (0x01, sp)
      0002D6 A3 04 00         [ 2]  707 	cpw	x, #0x0400
      0002D9 26 05            [ 1]  708 	jrne	00102$
                                    709 ;	HAL_CLK.c: 419: tmpreg = CLK->CSSR;
      0002DB C6 50 C8         [ 1]  710 	ld	a, 0x50c8
      0002DE 20 03            [ 2]  711 	jra	00112$
      0002E0                        712 00102$:
                                    713 ;	HAL_CLK.c: 423: tmpreg = CLK->CCOR;
      0002E0 C6 50 C9         [ 1]  714 	ld	a, 0x50c9
      0002E3                        715 00112$:
                                    716 ;	HAL_CLK.c: 426: if ((tmpreg & (uint8_t)CLK_FLAG) != 0)
      0002E3 88               [ 1]  717 	push	a
      0002E4 7B 07            [ 1]  718 	ld	a, (0x07, sp)
      0002E6 6B 03            [ 1]  719 	ld	(0x03, sp), a
      0002E8 84               [ 1]  720 	pop	a
      0002E9 14 02            [ 1]  721 	and	a, (0x02, sp)
      0002EB 27 03            [ 1]  722 	jreq	00114$
                                    723 ;	HAL_CLK.c: 428: bitstatus = 1;
      0002ED A6 01            [ 1]  724 	ld	a, #0x01
                                    725 ;	HAL_CLK.c: 432: bitstatus = 0;
      0002EF 21                     726 	.byte 0x21
      0002F0                        727 00114$:
      0002F0 4F               [ 1]  728 	clr	a
      0002F1                        729 00115$:
                                    730 ;	HAL_CLK.c: 436: return(bitstatus);
                                    731 ;	HAL_CLK.c: 438: }
      0002F1 5B 02            [ 2]  732 	addw	sp, #2
      0002F3 81               [ 4]  733 	ret
                                    734 ;	HAL_CLK.c: 440: uint8_t CLK_GetITStatus(CLK_IT_TypeDef CLK_IT)
                                    735 ;	-----------------------------------------
                                    736 ;	 function CLK_GetITStatus
                                    737 ;	-----------------------------------------
      0002F4                        738 _CLK_GetITStatus:
                                    739 ;	HAL_CLK.c: 444: if (CLK_IT == CLK_IT_SWIF)
      0002F4 7B 03            [ 1]  740 	ld	a, (0x03, sp)
      0002F6 A1 1C            [ 1]  741 	cp	a, #0x1c
      0002F8 26 0D            [ 1]  742 	jrne	00108$
                                    743 ;	HAL_CLK.c: 447: if ((CLK->SWCR & (uint8_t)CLK_IT) == (uint8_t)0x0C)
      0002FA C6 50 C5         [ 1]  744 	ld	a, 0x50c5
      0002FD 14 03            [ 1]  745 	and	a, (0x03, sp)
                                    746 ;	HAL_CLK.c: 449: bitstatus = 1;
      0002FF A0 0C            [ 1]  747 	sub	a, #0x0c
      000301 26 02            [ 1]  748 	jrne	00102$
      000303 4C               [ 1]  749 	inc	a
      000304 81               [ 4]  750 	ret
      000305                        751 00102$:
                                    752 ;	HAL_CLK.c: 453: bitstatus = 0;
      000305 4F               [ 1]  753 	clr	a
      000306 81               [ 4]  754 	ret
      000307                        755 00108$:
                                    756 ;	HAL_CLK.c: 459: if ((CLK->CSSR & (uint8_t)CLK_IT) == (uint8_t)0x0C)
      000307 C6 50 C8         [ 1]  757 	ld	a, 0x50c8
      00030A 14 03            [ 1]  758 	and	a, (0x03, sp)
                                    759 ;	HAL_CLK.c: 461: bitstatus = 1;
      00030C A0 0C            [ 1]  760 	sub	a, #0x0c
      00030E 26 02            [ 1]  761 	jrne	00105$
      000310 4C               [ 1]  762 	inc	a
      000311 81               [ 4]  763 	ret
      000312                        764 00105$:
                                    765 ;	HAL_CLK.c: 465: bitstatus = 0;
      000312 4F               [ 1]  766 	clr	a
                                    767 ;	HAL_CLK.c: 469: return bitstatus;
                                    768 ;	HAL_CLK.c: 471: }
      000313 81               [ 4]  769 	ret
                                    770 ;	HAL_CLK.c: 473: void CLK_ClearITPendingBit(CLK_IT_TypeDef CLK_IT)
                                    771 ;	-----------------------------------------
                                    772 ;	 function CLK_ClearITPendingBit
                                    773 ;	-----------------------------------------
      000314                        774 _CLK_ClearITPendingBit:
                                    775 ;	HAL_CLK.c: 475: if (CLK_IT == (uint8_t)CLK_IT_CSSD)
      000314 7B 03            [ 1]  776 	ld	a, (0x03, sp)
      000316 A1 0C            [ 1]  777 	cp	a, #0x0c
      000318 26 05            [ 1]  778 	jrne	00102$
                                    779 ;	HAL_CLK.c: 478: CLK->CSSR &= (uint8_t)(~CLK_CSSR_CSSD);
      00031A 72 17 50 C8      [ 1]  780 	bres	20680, #3
      00031E 81               [ 4]  781 	ret
      00031F                        782 00102$:
                                    783 ;	HAL_CLK.c: 483: CLK->SWCR &= (uint8_t)(~CLK_SWCR_SWIF);
      00031F 72 17 50 C5      [ 1]  784 	bres	20677, #3
                                    785 ;	HAL_CLK.c: 486: }
      000323 81               [ 4]  786 	ret
                                    787 	.area CODE
                                    788 	.area CONST
      000000                        789 _HSIDivFactor:
      000000 01                     790 	.db #0x01	; 1
      000001 02                     791 	.db #0x02	; 2
      000002 04                     792 	.db #0x04	; 4
      000003 08                     793 	.db #0x08	; 8
      000004                        794 _CLKPrescTable:
      000004 01                     795 	.db #0x01	; 1
      000005 02                     796 	.db #0x02	; 2
      000006 04                     797 	.db #0x04	; 4
      000007 08                     798 	.db #0x08	; 8
      000008 0A                     799 	.db #0x0a	; 10
      000009 10                     800 	.db #0x10	; 16
      00000A 14                     801 	.db #0x14	; 20
      00000B 28                     802 	.db #0x28	; 40
                                    803 	.area INITIALIZER
                                    804 	.area CABS (ABS)
